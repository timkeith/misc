#!/usr/bin/env perl
# vim:ft=perl:

use strict;
use warnings;
use Digest::MD5 ();
use File::Spec::Functions qw(catfile catdir);
use File::Basename qw(basename);
use lib File::Basename::dirname __FILE__;
use lib catfile($ENV{ROOT}, 'bin');
use Misc qw(dirname assert note warning error fatal internal);
sub fix_mobile($);
sub to_string($);
sub build_alphabet();
sub build_alphabet2();
$| = 1;

#TODO: add site-specific rules as needed

# maybe: use this alphabet - have to go through result, map 2 hex digits to 0..255,
# index into this array
# chars to use in passowrds:
#my @ALPHABET = ('0'..'9', 'a'..'z', 'A'..'Z', split('', '!@#$%^&*()_+-=,.<>/?;:'));

# need alphabet with 256 elements
#   26 lower case
#   26 upper case
#   10 digits
#   22 others
#   84 total * 3 = 252
# but want more oddballs

my @SPECIAL = split('', '!@#$%^&*()_+-=,.<>/?;:');
#my @SPECIAL_AND_DIGITS = ('0' .. '9', @SPECIAL);
my @SPECIAL_AND_DIGITS = ('0' .. '9');

# build_alphabet2 uses no special chars, just letters and numbers
my @ALPHABET = build_alphabet2();

my $LENGTH = 12;
my $OPT = Misc::getopt(
    {args => '0-2'},
    '
Generate a site-specific password from a URL.
Use "gen_password random" to generate a completely random password.,
Use "gen_password mobile" to generate an easier-to-type random password.',
    'length=i' => "Length of password, default is $LENGTH",
);
$LENGTH = $OPT->length if $OPT->length;

my $mobile = 0;
my($master, $site) = (rand(), '<random>');
my $arg = join(' ', map { s/ /_/g; $_ } @ARGV);
if ($arg eq 'mobile') {
    $mobile = 1;
} elsif ($arg eq '') {
    $arg = 'random';
} else {
    $arg =~ /^master=(\S+) site=(\S+)$/
        or fatal 'Bad arguments; expected: master=* site=*';
    ($master, $site) = ($1, $2);
}

$site =~ s{.*?://}{};
$site =~ s{^www\.}{};
$site =~ s{/.*}{};

# build a password at least as long as $LENGTH
my $pw = '';
while (length($pw) < 2*$LENGTH) {
    $pw .= to_string(Digest::MD5::md5($master, $site, $pw));
}
if ($mobile) {
    $pw = fix_mobile($pw);
} else {
    $pw = substr($pw, 0, $LENGTH);
}
#printf "site=%s pw=%s length=%d\n", $site, $pw, length($pw);
printf "%s\n", $pw;

#TODO: not working yet - this doesn't set clip when called from AHK

exit;

# want it in 3rds: letters, numbers, letters
sub fix_mobile($) {
    my($pw) = @_;
    my $l1 = int($LENGTH / 3);
    my $l2 = int(($LENGTH - $l1) / 2);
    my $l3 = $LENGTH - $l1 - $l2;
    my $letters = Misc::subst(lc($pw), '\d' => '');
    my $numbers = Misc::subst($pw, '\D' => '');
    my $x = substr($letters, 0, $l1);
    my $y = substr($numbers, 0, $l2);
    my $z = substr($letters, $l1, $l3);
    return "$x$y$z";
}

sub to_string($) {
    my($hash) = @_;
    return join('', map { $ALPHABET[ord($_)] } split('', $hash));
}

sub build_alphabet() {
    my @a = ('a'.. 'z', 'A'..'Z');
    @a = (@a, @a);
    while ($#a < 255) {
        @a = (@a, @SPECIAL_AND_DIGITS);
    }
    splice(@a, 256);
    return @a;
}

sub build_alphabet2() {
    my @a = ('a'..'z', 'A'..'Z', '0'..'9', '0'..'9', '0'..'9');
    while ($#a < 255) {
        @a = (@a, @a);
    }
    splice(@a, 256);
    return @a;
}
