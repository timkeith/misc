#!/usr/bin/env coffee
log = console.log

fs = require('fs')
readline = require('readline')
google = require('googleapis')
googleAuth = require('google-auth-library')
moment = require('moment')

# NOTE: if SCOPE is changed, may need to delete TOKEN_PATH
SCOPE_RO = 'https://www.googleapis.com/auth/calendar.readonly'
SCOPE_RW = 'https://www.googleapis.com/auth/calendar'
SCOPE = SCOPE_RW
TOKEN_DIR = "#{process.env.HOME or process.env.HOMEPATH or process.env.USERPROFILE}/.credentials/"
TOKEN_PATH = "#{TOKEN_DIR}/calendar-nodejs-quickstart.json"

CLIENT_SECRET_FILE = 'client_secret.json'
CAL_NAME = 'Logan'
TITLE = "Logan Macy's"

main = () ->
  fs.readFile CLIENT_SECRET_FILE, (err, content) ->
    return if checkErr "reading #{CLIENT_SECRET_FILE}", err
    # Authorize a client with the loaded credentials, then call the
    # Google Calendar API.
    authorize JSON.parse(content), (auth) ->
      calendar = google.calendar('v3')
      calendar.calendarList.list {auth: auth}, (err, response) ->
        return if checkErr 'calendarList.list', err
        calId = item.id for item in response.items when item.summary == CAL_NAME
        console.log 'calId:', calId
        if not calId
          console.log "Did not find calendar '#{CAL_NAME}'"
          return
        insertEvents(auth: auth, calendarId: calId)

# Load client secrets from a local file.

# Create an OAuth2 client with the given credentials, and then execute the
# given callback function.
#
# @param {Object} credentials The authorization client credentials.
# @param {function} callback The callback to call with the authorized client.
authorize = (credentials, callback) ->
  clientSecret = credentials.installed.client_secret
  clientId = credentials.installed.client_id
  redirectUrl = credentials.installed.redirect_uris[0]
  auth = new googleAuth()
  oauth2Client = new auth.OAuth2(clientId, clientSecret, redirectUrl)
  # Check if we have previously stored a token.
  fs.readFile TOKEN_PATH, (err, token) ->
    if err
      getNewToken oauth2Client, callback
    else
      oauth2Client.credentials = JSON.parse(token)
      callback oauth2Client

# Get and store new token after prompting for user authorization, and then
# execute the given callback with the authorized OAuth2 client.
#
# @param {google.auth.OAuth2} oauth2Client The OAuth2 client to get token for.
# @param {getEventsCallback} callback The callback to call with the authorized
#     client.
getNewToken = (oauth2Client, callback) ->
  authUrl = oauth2Client.generateAuthUrl(access_type: 'offline', scope: [SCOPE])
  console.log 'Authorize this app by visiting this url: ', authUrl
  rl = readline.createInterface(input: process.stdin, output: process.stdout)
  rl.question 'Enter the code from that page here: ', (code) ->
    rl.close()
    oauth2Client.getToken code, (err, token) ->
      return if checkErr 'get access token', err
      oauth2Client.credentials = token
      storeToken(token)
      callback(oauth2Client)


# Store token to disk be used in later program executions.
# @param {Object} token The token to store to disk.
storeToken = (token) ->
  try
    fs.mkdirSync TOKEN_DIR
  catch err
    if err.code != 'EEXIST'
      throw err
  fs.writeFile TOKEN_PATH, JSON.stringify(token)
  console.log 'Token stored to ' + TOKEN_PATH

# Given a calendar summary, return its id if it exists.
findCalId = (auth, summary) ->
  calendar = google.calendar('v3')
  calId = undefined
  calendar.calendarList.list {auth: auth}, (err, response) ->
    return if checkErr 'calendarList.list', err
    for item in response.items
      if item.summary == summary
        calId = item.id
  return calId

insertEvents = (data) ->
  calendar = google.calendar('v3')
  console.log 'Enter events like: 10/17 915a-445p'
  rl = readline.createInterface(input: process.stdin, output: process.stdout)
  readAndCreateEvents(data, calendar, rl)

readAndCreateEvents = (data, calendar, rl) ->
  rl.question 'Enter event: ', (event) ->
    return if event is 'done'
    [start, end] = parseEvent(event)
    title = "to #{formatTime(end)} #{TITLE}"
    log '%s: %s - %s  %s',
      start.toString().slice(4, 10), start.toString().slice(16, 21)
      end.toString().slice(16, 21), title
    #console.log 'title', title
    if start?
      calendar.events.insert {
        auth:       data.auth
        calendarId: data.calendarId
        resource:
          summary:  title
          start:    dateTime: start
          end:      dateTime: end
      }, (err, event) ->
        if not checkErr 'calendar.events.insert', err
          console.log 'created successfully'
        readAndCreateEvents(data, calendar, rl)

# Lists the next 10 events on the user's primary calendar.
#
# @param {google.auth.OAuth2} auth An authorized OAuth2 client.
listEvents = (auth, calId) ->
  calendar = google.calendar('v3')
  calendar.events.list {
    auth:         auth
    calendarId:   calId
    timeMin:      new Date().toISOString()
    maxResults:   10
    singleEvents: true
    orderBy:      'startTime'
  }, (err, response) ->
    return if checkErr 'calendar.events.list', err
    events = response.items
    if events.length == 0
      console.log 'No upcoming events found.'
    else
      console.log 'Upcoming 10 events:'
      for event in events
        start = event.start.dateTime or event.start.date
        console.log '%s - %s', start, event.summary

parseEvent = (event) ->
  #         1      2      3       4          5          6       7          8
  pat = /^ *(\d+)\/(\d+) +(\d+?):?((?:\d\d)?)([ap]?)[- ](\d+?):?((?:\d\d)?)([ap]?) *$/
  match = event.match pat
  if not match
    log 'Input should be MM/DD hh:mm[ap]-hh:mm[ap]'
    return []
  [x, mon, day, h1, m1, ap1, h2, m2, ap2] = match
  #log 'mon=%d day=%d h1=%d m1=%d ap1=%s h2=%d m2=%d ap2=%s', mon, day, h1, m1, ap1, h2, m2, ap2
  if ap1 == ''
    ap1 = if h1 <= 7 then 'p' else 'a'
  if ap2 == ''
    ap2 = if h2 <= 10 then 'p' else 'a'
  mon = +mon - 1
  h1 = +h1 + 12 if ap1 == 'p' && h1 != '12'
  h2 = +h2 + 12 if ap2 == 'p' && h2 != '12'
  #log 'mon=%d day=%d h1=%d m1=%d ap1=%s h2=%d m2=%d ap2=%s', mon, day, h1, m1, ap1, h2, m2, ap2
  thisMon = new Date().getMonth()
  thisYear = new Date().getFullYear()
  year = thisYear + if thisMon > mon then 1 else 0
  start = new Date(year, mon, day, h1, m1, 0)
  end = new Date(year, mon, day, h2, m2, 0)
  return [start, end]

formatTime = (date) ->
  h = date.getHours()
  m = date.getMinutes()
  ap = if h >= 12 then 'p' else 'a'
  h -= 12 if h > 12
  m = '0' + m if m < 10
  return "#{h}:#{m}#{ap}"

checkErr = (op, err) ->
  if err
    console.log "Error from #{op}: #{err}"
    return true
  else
    return false

main()
